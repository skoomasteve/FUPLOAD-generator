#______________________________________________________________________

## FUPLOAD GENERATOR ##

#### Copyright 2020 - MIT Licesnse   Author: Steven Soward  ####

#_______________________________________________________________________

##  This program provides a graphical interface to convert an excel spreadsheet (input file)  to the apropriate format for a "fupload" into Banner SIS.  The program will validate the input and output files.  Instructions are seen when the script is run.

## This program requires a windows machine runing powershell 4 or newer.  

#######################################
## PERMANANT DATA MAPPING:  CHANGE THE VARIABLES BELOW TO ALTER DATA OUTPUT:
#######################################

$RULECLASSCODE = "JE16"
$BANKCODE = "1C"
$CHARTCODE = "1"

#subtract one from desired line length
$linelength = 148
#######################################

###  --  To change the position of a value:

#   If you need to change the position of something you can scroll down to find the header, body, and footer sections, the variables and column positions are defined there.

#   -note- if you need to edit the colomn position of a variable, subtract one from the desired number.  Also keep in mind that the currency values are all right alligned and padded either 7 or 10 from the row specified in the code

###  -- To specify a new source column/field to the output file:

#   Scroll down to the "COLUMN NAME TO VARIABLE MAPPING" section and specify new colum heading to be read, you'll need to insert or append the new column 
#   heading variables next to the nearest existing variable (based on the output row specified).    
# 

###DEFINES THE DATE FORMAT

#$Sdate = Get-Date -Format 'MM-dd-yyyy.HH.mm'
$date = Get-Date -Format 'MM-dd-yyyy.HH.mm'
Add-Type -AssemblyName PresentationFramework

Function checkcreditdebit{	
 $badlines = 0
    import-csv "$env:temp\$date-tmpfupload.csv" | ForEach {
    $ctotal = 0
    $dtotal = 0
    $ctotal += $_.credit
    $dtotal += $_.debit
    $cvsd = $ctotal+$dtotal
    If ($_.credit -gt '0' -And $_.debit -gt '0') { $badlines += 1
       
      
      } 
   



    }
if ($badlines -gt 0) { 
    $userresponse=[System.Windows.MessageBox]::Show("$badlines line(s) have both credit and debit fields populated.
    Please fix the input file credit/debit fields and try again")}
    
if ($badlines -eq 0 -and $cvsd -gt 1) { 
    $userresponse=[System.Windows.MessageBox]::Show("Input file passed credit/debit validation")}


}


######################################################
#Get-Filename Function
######################################################

    Function Get-FileName($initialDirectory)
{
    [System.Reflection.Assembly]::LoadWithPartialName("System.windows.forms") | Out-Null
    $OpenFileDialog = New-Object System.Windows.Forms.OpenFileDialog
    $OpenFileDialog.initialDirectory = $initialDirectory
    $OpenFileDialog.filter = "All files (*.*)| *.*"
    if ($OpenFileDialog.ShowDialog() -eq [System.Windows.Forms.DialogResult]::OK) { $OpenFileDialog.FileName }
    $Global:SelectedFile = $OpenFileDialog.FileName
    $inputfilequickviwbutton.enabled = $True
    $generatefilebutton.enabled = $true
} #end function Get-FileName

#####csv conversion function 

function convertcsv {

    $extn = [IO.Path]::GetExtension($SelectedFile)
    if ($extn -eq (".xlsx") -or (".xls") ) 
    {
$xlCSV=6
$xls=$SelectedFile
$csv="$env:temp\$date-tmpfupload.csv"
$xl=New-Object -com "Excel.Application"
$wb=$xl.workbooks.open($xls)
$wb.SaveAs($csv,$xlCSV)
$xl.displayalerts=$False
$xl.quit()
$xl.quit()
    
    
}}

#######################################################
#Fupload processor  - function
#######################################################
Function makefupload{	
   #______________________________________________________________________









###redundant assembly addition

Add-Type -AssemblyName PresentationFramework


#



#############
### INITIAL MESSAGE  (this tells the user what the input format needs to look like)

$userresponse=[System.Windows.MessageBox]::Show('This utility will use the specified .CSV or Excel file to generate the FUPLOAD file to a .txt file.



-Excel must be installed on your machine in order to import excel files

If you do not use the template to input the data, The fourth row/line of your custom input file must have at least the following column headings, each in an UNMERGED cell: 

Fund
Orgn
Acct
Prog
Actv
Locn
Debit
Credit


   
Press OK to process your specified input file', 'OBU FUPLOAD File Generator','ok')
if ($UserResponse -eq "ok" ) 
{

#Yes activity (script will move on since this is null)
##### maybe put the script here?

} 

else 

{
    #something else
    
}

$descriptionprompt = $textbox4.text
$SYSID =  $textbox3.text



#######_____________PROGRESS BAR STUFF, IGNORE THE NEXT MANY LINES UNTIL THE NEXT "####" COMMENT: -- ___________________________


$script:StartTime
$outputpath="C:\Users\$env:UserName\Desktop"	## --- Put Folder-Path Here 
If (Test-Path $outputpath) {
	Write-Host
	Write-Host "Generating Fupload file" -ForegroundColor "Yellow"
	Write-Host "=========================================" -ForegroundColor "Yellow"


Add-Type -assembly System.Windows.Forms

	## -- Create The Progress-Bar
	$ObjForm = New-Object System.Windows.Forms.Form
	$ObjForm.Text = "OBU Fupload File Generator"
	$ObjForm.Height = 200
	$ObjForm.Width = 500
	$ObjForm.BackColor = "White"

	$ObjForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedSingle
	$ObjForm.StartPosition = [System.Windows.Forms.FormStartPosition]::CenterScreen

	## -- Create The Label
	$ObjLabel = New-Object System.Windows.Forms.Label
	$ObjLabel.Text = "Starting, Please wait ... "
	$ObjLabel.Left = 5
	$ObjLabel.Top = 10
	$ObjLabel.Width = 500 - 35
	$ObjLabel.Height = 80
	$ObjLabel.Font = "Tahoma,11"
	## -- Add the label to the Form
	$ObjForm.Controls.Add($ObjLabel)

	$PB = New-Object System.Windows.Forms.ProgressBar
	$PB.Name = "PowerShellProgressBar"
	$PB.Value = 30
	$PB.Style="Continuous"

	$System_Drawing_Size = New-Object System.Drawing.Size
	$System_Drawing_Size.Width = 500 - 40
	$System_Drawing_Size.Height = 1
	$PB.Size = $System_Drawing_Size
	$PB.Left = 5
	$PB.Top = 40
    $PB.Value = 70 
	$ObjForm.Controls.Add($PB)

	## ---- Show the Progress-Bar and Start The PowerShell Script
	$ObjForm.Show() | Out-Null
	$ObjForm.Focus() | Out-NUll
	$ObjLabel.Text = "Generating the File.  
Please Wait ... "
    $objform.TopMost = $True
	$ObjForm.Refresh()



#--------------------------------------------------------------

####__________  Converts to Selected File to CSV if the selected file is an Excel file

#--------------------------------------------------------------

$extn = [IO.Path]::GetExtension($SelectedFile)
    if ($extn -eq (".xlsx") -or (".xls") ) 
    {
$xlCSV=6
$xls=$SelectedFile
$csv="C:\Users\$env:UserName\Desktop\FUPtemporaryfile.csv"
$xl=New-Object -com "Excel.Application"
$wb=$xl.workbooks.open($xls)
$wb.SaveAs($csv,$xlCSV)
$xl.displayalerts=$False
$xl.quit()
$xl.quit()
$selectedfile=$csv

}





#############################################

###SKIPS THE TOP THREE LINES OF THE INPUT FILE

#############################################
#$log = Get-Content -Path $csv
#$snippet = $log[3..($log.count - 0)]
#$snippet>$csv






####################################

#  WRITES HEADER FILE

####################################
$desireddate = $textbox1.text

$HEADER = "                                                                              "
$HEADER = $HEADER.INSERT(0,"$SYSID")
$HEADER = $HEADER.Insert(16,"1")
$HEADER = $HEADER.INSERT(17,"$desireddate")

$HEADER >> C:\Users\$env:UserName\Desktop\tempFUPfile-$date.txt 





####################################

###IMPORTS THE FILE PREVIOUSLY DESIGNATED AND BEGINS PROCESSING DATA FOR EACH LINE OF DATA PAST THE HEADER

####################################


$Result = import-csv $csv | ForEach-object {


#####################################################################################
 
#####   COLUMN NAME TO VARIABLE MAPPING  ####################  

#    edit the " $_. " variables as needed if there is a change to the input file column headings

#####################################################################################

$Fund = $_.fund
$Orgn = $_.org
$Acct = $_.acct
$Prog = $_.prog
$Actv = $_.actv
$Locn = $_.locn
$Debit = $_.debit
$Credit = $_.credit
$builtindescription = $_.description1


#####  some other variables defined and combined here

$recordcount = $recordcount +1
$debittotal = [int]$debit + [int]$debittotal
$Credittotal = [int]$credit + [int]$credittotal
$lineamount = [int]$credit + [int]$debit
$bodytwo = '2'
#$lineamount = [string]$lineamount
$lineamount = ([string]$lineamount).PadLeft(12,'0')







#If ($_credit -lt '0.1' -or $_debit -lt '0.1') {
# $userresponse=[System.Windows.MessageBox]::Show('At least one line has a NEGATIVE value for credit or debit,
# Please fix the input file credit/debit fields and try again')

#exit

#} 


#####################################

##Determines the credit code by process of elimination

#####################################

if ([string]::IsNullOrEmpty($_.Credit)) {
$creditordebitcode = "D"
}
else
{
$creditordebitcode = "C"
 }


#### variable later used to truncate the description after description is entered

$descriptiontruncate = "                                                                        "


####################################

#### Console status updates:



Write-Host "writing a line for record #$recordcount"  -ForegroundColor "Magenta"
Write-Host "THIS $_.description"



###POPULATES THE DESCRIPTION WITH EITHER/BOTH PROMPT AND BUILTIN DESCRIPTION

$description = "$buitindescription"




###MAKES SURE THERE AREN'T ANY COMMAS OR DECIMAL POINTS IN $Credit & $debit

#$Credit = $credit -replace ‘[,.]’,''
#$debit = $debit -replace ‘[,.]’,''


        



##########################################################################################################################################################
##THIS BLOCK OF CODE INSTERTS THE DATA INTO THE APPROPRIATE LINE POSITIONS || EDIT THE NUMBERS TO CHANGE WHERE THE DATA IS WRITTEN 
##  THESE ONLY EFFECT THE TRANSACTION (body) SECTION OF THE OUTPUT FILE, NOT THE FIRST LINE OR LAST TWO LINES.
##########################################################################################################################################################
$Body1 = "                                                                                                                                                                                                                                                                                                                                                                                                                       "

$Body1 = $Body1.Insert(0,"$SYSID")
$Body1 = $Body1.Insert(16,"$bodytwo")
$Body1 = $Body1.Insert(17,$ruleclasscode)
$Body1 = $Body1.Insert(21,$recordcount)
$Body1 = $Body1.Insert(29,$lineamount)
$Body1 = $Body1.Insert(42,$Description)
$Body1 = $Body1.Insert(75,$descriptiontruncate)
$Body1 = $Body1.Insert(76,$creditordebitcode)
$Body1 = $Body1.Insert(77,$bankcode)
$Body1 = $Body1.Insert(79,$chartcode)
$Body1 = $Body1.Insert(86,$fund)
$Body1 = $Body1.Insert(91,$orgn)
$Body1 = $Body1.Insert(98,$acct)
$Body1 = $Body1.Insert(104,$prog)
$Body1 = $Body1.Insert(110,$actv)
$Body1 = $Body1.Insert(116,$locn)






$Body1 >> C:\Users\$env:UserName\Desktop\tempFUPfile-$date.txt 

###console output for credits/debits

IF([string]::IsNullOrEmpty($credit)) {            
    Write-Host "$debit written as debit for record #$recordcount" -ForegroundColor "Yellow"           
} else {            
    Write-Host "$Credit written as credit for record #$recordcount" -ForegroundColor "blue"  
          
}


## ignore the following progress bar code:
#++++++++++

}
   # $zeero = 1
   # $reference = $SelectedFile.count

          
	foreach ($line  in Get-Content C:\Users\$env:UserName\Desktop\tempFUPfile-$date.txt) {
		## -- Calculate The Percentage Completed
		$Counter++
		[Int]$Percentage = ($Counter/3500)
		$PB.Value = $Percentage
		$ObjLabel.Text = "Writing File to $env:UserName\Desktop\tempFUPfile-$date.txt"
		$ObjForm.Refresh()
		#Start-Sleep -Milliseconds 1500
		# -- $Item.Name
		#"`t" + $Item.Path

	}

	$ObjForm.Close()
	Write-Host "`n"
}

Else {
	Write-Host
	Write-Host "`t Cannot Execute The Script." -ForegroundColor "Yellow"
	Write-Host "`t $outputpath Does Not Exist in the System." -ForegroundColor "Yellow"
	Write-Host
}
#+++++++++++++++++++++++


#_____________________________________
#      Footer
#_____________________________________


$footerline1 = "                                                                                                                                                    "
$footerline2 = "                                                                                                                                                    "
$footerthree = '3'
$footerfour = '4'
$footerrecordcount = $recordcount 
$debitspluscredits = [int]$debittotal + [int]$Credittotal
#$debitspluscredits = [int]$debitspluscredits 

###RIGHT ALLIGNMENT FOR FOOTER VAIRABLE OUTPUT - ".PADLEFT" PADS WITH the '0' specified a specific number of spaces
#$footerrecordcount.PadLeft(8,'0')
#$debitspluscredits.Padleft(12,'0')

$footerrecordcount = ([string]$footerrecordcount).PadLeft(8,'0')
$debitspluscredits = ([string]$debitspluscredits).PadLeft(12,'0')





##first footer line:
$footerline1 = $footerline1.Insert(0,$SYSID)
$footerline1 = $footerline1.Insert(16,$footerthree)
$footerline1 = $footerline1.Insert(17,$footerrecordcount)
$footerline1 = $footerline1.Insert(25,$debitspluscredits)


$footerline1 >> C:\Users\$env:UserName\Desktop\tempFUPfile-$date.txt 

#second footer line:
$footerline2 = $footerline2.Insert(0,$SYSID)
$footerline2 = $footerline2.Insert(16,$footerfour)
$footerline2 = $footerline2.Insert(17,$description)
$footerline2 = $footerline2.Insert(65,"                                 ")
$footerline2 = $footerline2.Insert(67,"$env:UserName OBU")

$footerline2 >> C:\Users\$env:UserName\Desktop\tempFUPfile-$date.txt 

$filedate = get-date -format 'MMM-dd'
$year = get-date -Format 'yyyy'

#<_____________________________________ -- Truncate each Line to specified size -- _________________________________
$finalfile = "C:\Users\$env:UserName\documents\FUPLOAD\$year\$filedate\FUPLOADfile-$date.txt" 

$tempfile = "C:\Users\$env:UserName\Desktop\tempFUPfile-$date.txt"
#subtract 1 from your desired line length if you need to change it

$linenumberpad = 1
$one=1
$calculatedpad = ($linelength)-($_.length)
$calculatedpad = ($calculatedpad)+($one)
Get-Content -path $tempfile | ForEach {

    If ($_.Length -lt $linelength) {

        $_.padright($calculatedpad) 
        write-host "Line $linenumberpad has been padded"

    } Else {

       

        $_.Substring(0,$linelength)  
        write-host "Line $linenumberpad has been truncated"

    }
    $linenumberpad += 1
    #________________________________ --- saves the final version of the file --- ______________________
} | Out-File ( New-Item -Path "$Finalfile" -Force )
$Quickviewcontent = "$env:temp\quickviewcontent.csv"
"   " > "$env:temp\quickviewcontent.csv"
Get-Content -raw $finalfile >> $quickviewcontent
#>


# ------------------------creates UNIX Line endings in the file-------------------------
$fileforeolcovert = $finalfile

$filecontent = [IO.File]::ReadAllText($fileforeolcovert) -replace "`r`n", "`n"
[IO.File]::WriteAllText($fileforeolcovert, $filecontent)



#------Clean up temp file


Remove-Item $tempfile
#Remove-Item -path C:\Users\$env:UserName\Desktop\FUPtemporaryfile.csv 

#_______________________________________ --- Clean up variables for multiple runs --- _________________________

$emailfuploadbutton.enabled = $false
$viewfuploadbutton.enabled = $True

remove-item $csv -force
remove-item $tempfile -force

#_______________________________________ --- Ending Notification --- _________________________
#^^^
start-Process -FilePath C:\Windows\explorer.exe -ArgumentList "/select, ""$finalfile"""


## Thanks to Boe Prox we can have a notification popup to notify us of file completion.
### his code is below    -ss
Function Invoke-BalloonTip {
    <#
    .Synopsis
        Display a balloon tip message in the system tray.
    .Description
        This function displays a user-defined message as a balloon popup in the system tray. This function
        requires Windows Vista or later.
    .Parameter Message
        The message text you want to display.  Recommended to keep it short and simple.
    .Parameter Title
        The title for the message balloon.
    .Parameter MessageType
        The type of message. This value determines what type of icon to display. Valid values are
    .Parameter SysTrayIcon
        The path to a file that you will use as the system tray icon. Default is the PowerShell ISE icon.
    .Parameter Duration
        The number of seconds to display the balloon popup. The default is 1000.
    .Inputs
        None
    .Outputs
        None
    .Notes
         NAME:      Invoke-BalloonTip
         VERSION:   1.0
         AUTHOR:    Boe Prox
    #>

    [CmdletBinding()]
    Param (
        [Parameter(Mandatory=$True,HelpMessage="The message text to display. Keep it short and simple.")]
        [string]$Message,

        [Parameter(HelpMessage="The message title")]
         [string]$Title="Attention $env:username",

        [Parameter(HelpMessage="The message type: Info,Error,Warning,None")]
        [System.Windows.Forms.ToolTipIcon]$MessageType="Info",
     
        [Parameter(HelpMessage="The path to a file to use its icon in the system tray")]
        [string]$SysTrayIconPath='C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe',     

        [Parameter(HelpMessage="The number of milliseconds to display the message.")]
        [int]$Duration=10000
    )

    Add-Type -AssemblyName System.Windows.Forms

    If (-NOT $global:balloon) {
        $global:balloon = New-Object System.Windows.Forms.NotifyIcon

        #Mouse double click on icon to dispose
        [void](Register-ObjectEvent -InputObject $balloon -EventName MouseClick -SourceIdentifier IconClicked -Action {
            #Perform cleanup actions on balloon tip
            #Write-Verbose 'Disposing of balloon'
            #start-Process -FilePath C:\Windows\explorer.exe -ArgumentList "/select, "C:\users\steven.soward\documents\copyctr_111020_13149.txt""
            #$global:balloon.dispose()
            #Unregister-Event -SourceIdentifier IconClicked
            #Remove-Job -Name IconClicked
            #Remove-Variable -Name balloon -Scope Global
        })
    }

    #Need an icon for the tray
    $path = Get-Process -id $pid | Select-Object -ExpandProperty Path

    #Extract the icon from the file
    $balloon.Icon = [System.Drawing.Icon]::ExtractAssociatedIcon($SysTrayIconPath)

    #Can only use certain TipIcons: [System.Windows.Forms.ToolTipIcon] | Get-Member -Static -Type Property
    $balloon.BalloonTipIcon  = [System.Windows.Forms.ToolTipIcon]$MessageType
    $balloon.BalloonTipText  = $Message
    $balloon.BalloonTipTitle = $Title
    $balloon.Visible = $true

    #Display the tip and specify in milliseconds on how long balloon will stay visible
    $balloon.ShowBalloonTip($Duration)

    Write-Verbose "Ending function"

}

Invoke-BalloonTip -Message "The Fupload file has been generated as $finalfile" -Title 'File Created' -MessageType  Info  

<## FINAL MESSAGE BOX
$userresponseend=[System.Windows.MessageBox]::Show("The Fupload file has been generated and placed on your desktop", 'FUPLOAD File Generator','ok')
if ($UserResponseend -eq "ok" ) 
{

#Yes activity

} 

else 

{ 

exit

} 
}
#######################################################
#>
# UI components
#
#######################################################

}

$base64 = "
"
$date = Get-Date -Format MM-dd-yy-hh.mm

$Content = [System.Convert]::FromBase64String($Base64)
   Set-Content -Path "$env:temp\bk$date-.jpg" -Value $Content -Encoding Byte



$background = "$env:temp\bk$date-.jpg" 

function PromptWithTabs(
    [String] $title,
            [Object] $caller
    ){
            [void] [System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms')
            [void] [System.Reflection.Assembly]::LoadWithPartialName('System.Drawing')
			$width = 1120
			$Height = 560
            $f = New-Object System.Windows.Forms.Form
            

            $panel1 = new-object System.Windows.Forms.TabPage
            $panel2 = new-object System.Windows.Forms.TabPage
            $panel3 = new-object System.Windows.Forms.TabPage
	$textbox1 = new-object System.Windows.Forms.TextBox
	$textbox2 = new-object System.Windows.Forms.TextBox
    $textbox3 = new-object System.Windows.Forms.TextBox
    $textbox4 = new-object System.Windows.Forms.TextBox
    
    
    $textbox1.text = " YYYYMMDD"
    $textbox2.text = " <--Select an Input File"
    $textbox3.text = "COPYCTR"
    $textbox4.text = "JE Description"

	
	$generatefilebutton = new-object System.Windows.Forms.Button
    $Emailfuploadbutton = new-object System.Windows.Forms.Button
    $inputfilequickviwbutton = new-object System.Windows.Forms.Button
    $viewfuploadbutton = new-object System.Windows.Forms.Button
    $choseinputfilebutton = new-object System.Windows.Forms.Button
    
            $tab_control1 = new-object System.Windows.Forms.TabControl
            $panel1.SuspendLayout()
            $panel2.SuspendLayout()
            $panel3.SuspendLayout()
	$f.BackgroundImage = [System.Drawing.Image]::FromFile("$background")
	
	
	$f.Text = $title
	$f.AutoSize = $true
	
	##disables/enables maximise
	$f.MaximizeBox = $false
	##Prevents resizing
	$f.FormBorderStyle = "FixedSingle"
	$F.StartPosition = "CenterScreen"
	
            $tab_control1.SuspendLayout()


            $f.SuspendLayout()
    
            $panel2.Controls.Add($textbox1)
            $panel2.Controls.Add($textbox2)
            $panel2.Controls.Add($textbox3)
            $panel2.Controls.Add($textbox4)
            $panel2.Location = new-object System.Drawing.Point(4, 22)
            $panel2.Name = "tabPage2"
            $panel2.Padding = new-object System.Windows.Forms.Padding(3)
            $panel2.Size = new-object System.Drawing.Size(600, 300)
            $panel2.TabIndex = 1
            $panel2.Text = "Data Input Tab"
    
            $textbox1.Location = new-object System.Drawing.Point(72, 7)
            $textbox1.Name = "textBoxMessage"
            $textbox1.Size = new-object System.Drawing.Size(160, 30)
            $textbox1.TabIndex = 0
	
	$textbox2.Location = new-object System.Drawing.Point(142, 44)
	$textbox2.Name = "textBoxMessage2"
	$textbox2.Size = new-object System.Drawing.Size(160, 30)
    $textbox2.TabIndex = 0
    
    $textbox3.Location = new-object System.Drawing.Point(79, 84)
	$textbox3.Name = "textBoxMessage3"
	$textbox3.Size = new-object System.Drawing.Size(160, 30)
    $textbox3.TabIndex = 0
    
    $textbox4.Location = new-object System.Drawing.Point(79, 124)
	$textbox4.Name = "textBoxMessage4"
	$textbox4.Size = new-object System.Drawing.Size(160, 30)
	$textbox4.TabIndex = 0
	
	
	
	
    ########Labels - tab 2
    #  label 1
			$l1 = New-Object System.Windows.Forms.Label
			$l1.Text = 'File Date'
            $l1.Location = New-Object System.Drawing.Size(12,11)
            $l1.Size = New-Object System.Drawing.Size(60,30)
            
    
            $l1.Font = new-object System.Drawing.Font('Microsoft Sans Serif', 8, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point, 0);
            $panel2.Controls.Add($l1)

        
                ####label 2, tab 2
            $l2 = New-Object System.Windows.Forms.Label
            $l2.Text = 'Sys. ID'
            $l2.Location = New-Object System.Drawing.Size(21,88)
            $l2.Size = New-Object System.Drawing.Size(50,30)
            
            $l2.Font = new-object System.Drawing.Font('Microsoft Sans Serif', 8, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point, 0);
              $panel2.Controls.Add($l2)


            ####label 4, tab 2
            $l4 = New-Object System.Windows.Forms.Label
            $l4.Text = 'JE Description'
            $l4.Location = New-Object System.Drawing.Size(0,127)
            $l4.Size = New-Object System.Drawing.Size(75,30)
            
            $l4.Font = new-object System.Drawing.Font('Microsoft Sans Serif', 8, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point, 0);
            $panel2.Controls.Add($l4)


            
            
            
            
            
            


            $panel2.controls.add($choseinputfilebutton)
            $panel2.controls.add($inputfilequickviwbutton)
            $textbox1.Add_Leave( {
              
                if ($sender.Text.length -eq " YYYYMMDD") {
                  $l1.Text = 'Input required'
                  # [System.Windows.Forms.MessageBox]::Show('Input required')
                  $tab_control1.SelectedIndex = 1
                  $sender.Select()
                  $result = $sender.Focus()
                } else {
				$l1.Text = ''
                
                
				
				
			}
			
			
		})
            $panel1.Controls.Add($generatefilebutton)
	$panel1.Controls.Add($Emailfuploadbutton)
    $panel1.controls.add($viewfuploadbutton)

   
	
            $panel1.Location = new-object System.Drawing.Point(4, 22)
            $panel1.Name = "tabPage1"
            $panel1.Padding = new-object System.Windows.Forms.Padding(3)
            $panel1.Size = new-object System.Drawing.Size(600, 300)
            $panel1.TabIndex = 0
	$panel1.Text = "Action Tab"
    $panel2.Controls.Add($textbox1)

	
	##################
	#     Write Fupload File Button
	
            $generatefilebutton.Location = new-object System.Drawing.Point(104, 27)
            $generatefilebutton.Name = "buttonShowMessage"
            $generatefilebutton.Size = new-object System.Drawing.Size(107, 44)
            $generatefilebutton.TabIndex = 0
            $generatefilebutton.Text = "Create Fupload file"
            $generatefilebutton_Click = {
                makefupload
               
              
               
                
                
                $Newtext = "(Get-Content -Path $finalfile -Raw)  -replace ‘[,.]’,'' "
                #-replace "(?s)`r`n\s*$"
                "[system.io.file]::WriteAllText($finalfile,$Newtext)"
            } 
	$generatefilebutton.Add_Click($generatefilebutton_Click)
	$generatefilebutton.enabled = $False

	##################
	#     Email Fupload Button

	
	
	$emailfuploadbutton.Location = new-object System.Drawing.Point(104, 91)
	$emailfuploadbutton.Name = "buttonShowMessage"
	$emailfuploadbutton.Size = new-object System.Drawing.Size(107, 44)
	$emailfuploadbutton.TabIndex = 0
	$emailfuploadbutton.Text = "Email Fupload File"
	$emailfuploadbutton_Click = {

        Add-Type -AssemblyName Microsoft.VisualBasic
        $desiredemail = [Microsoft.VisualBasic.Interaction]::InputBox('Specify Email Address', 'Enter email address(es)', "someone@college.edu")
        if ($desiredemail -eq " ")
        {
            
            exit
            
        }
        
        else
        {
            
            #nothing
            
        }
        
        $Today = (Get-Date)
      
      #  
      
      
        
        $SMTPserver = "#enteraddress"
        $from = "#enteraddress"
        $to = "$desiredemail"
        $subject = "Fupload File"
        $attText = "EmailAttachment"
        $attName = "Fupload-$date.txt"
        $mailer = new-object Net.Mail.SMTPclient($SMTPserver)
        $msg = new-object Net.Mail.MailMessage($from, $to, $subject, $emailbody)
        $attach = new-object net.mail.attachment("$finalfile")
        $msg.Attachments.Add($attach)
        $msg.IsBodyHTML = $false
        $emailbody = "
        
        _____________________________________________
        
        Automated export of Fupload Files

      
        _____________________________________________
        
        Generated by Steven's Accounting Stack
        _____________________________________________"
      
        
        
        $mailer.send($msg)
       
        





        
       
	}
	$emailfuploadbutton.Add_Click($emailfuploadbutton_Click)
	$emailfuploadbutton.enabled = $false
	##################
	#     View Fupload Button
	$viewfuploadbutton.Location = new-object System.Drawing.Point(104, 157)
	$viewfuploadbutton.Name = "buttonShowMessage"
	$viewfuploadbutton.Size = new-object System.Drawing.Size(107, 44)
	$viewfuploadbutton.TabIndex = 0
	$viewfuploadbutton.Text = "Inspect Fupload File"
	$viewfuploadbutton_Click = {
        import-csv $env:temp\quickviewcontent.csv  |Out-GridView -Title "Output File Inspector" -wait | format-wide 

            
		
	}
	$viewfuploadbutton.Add_Click($viewfuploadbutton_Click)
	
	$viewfuploadbutton.enabled = $false
	################
            $panel2.Location = new-object System.Drawing.Point(4, 22)
            $panel2.Name = "tabPage2"
            $panel2.Padding = new-object System.Windows.Forms.Padding(3)
            $panel2.Size = new-object System.Drawing.Size(259, 52)
            $panel2.TabIndex = 1
            $panel2.Text = "Data Input Tab"
    
            $textbox1.Location = new-object System.Drawing.Point(72, 7)
            $textbox1.Name = "textBoxMessage"
            $textbox1.Size = new-object System.Drawing.Size(100, 20)
            $textbox1.TabIndex = 0
    
            $l1 = New-Object System.Windows.Forms.Label
            $l1.Location = New-Object System.Drawing.Size(72,32)
            $l1.Size = New-Object System.Drawing.Size(400,300)
            $l1.Text = ''
    
            $l1.Font = new-object System.Drawing.Font('Microsoft Sans Serif', 8, [System.Drawing.FontStyle]::Regular, [System.Drawing.GraphicsUnit]::Point, 0);
	
	

	
	
	
	$panel2.Controls.Add($l1)
	
	########TAB 2
    

    ## quickview button -input file


    ##################
    # 
    $inputfilequickviwbutton.Location = new-object System.Drawing.Point(275, 150)
    $inputfilequickviwbutton.Name = "buttonShowMessage"
    $inputfilequickviwbutton.Size = new-object System.Drawing.Size(75, 22)
    $inputfilequickviwbutton.TabIndex = 0
    $inputfilequickviwbutton.Text = "quickview"
    $inputfilequickviwbutton_Click = {
        convertcsv
        Import-Csv -Path $env:temp\$date-tmpfupload.csv | Out-GridView -Title "Input file quickview" -PassThru | format-wide
        
               
    }
    $inputfilequickviwbutton.Add_Click($inputfilequickviwbutton_Click)
    $inputfilequickviwbutton.enabled = $false



	##################
	#     Choose Spreadhseet Button
	$choseinputfilebutton.Location = new-object System.Drawing.Point(7, 43)
	$choseinputfilebutton.Name = "buttonShowMessage"
	$choseinputfilebutton.Size = new-object System.Drawing.Size(127, 22)
	$choseinputfilebutton.TabIndex = 0
	$choseinputfilebutton.Text = "Choose Input file"
	$choseinputfilebutton_Click = {
	
		
		
        Get-FileName
       
        $textbox2.Text = $selectedfile
        convertcsv
        checkcreditdebit
		#[System.Windows.Forms.MessageBox]::Show($textbox2.Text);
	}
	$choseinputfilebutton.Add_Click($choseinputfilebutton_Click)
	
	
	
    
            $textbox2.Add_Leave( {
               param(
                [Object] $sender,
                [System.EventArgs] $eventargs
                )
                if ($sender.Text.length -eq "<--Select an Input File") {
                  $l1.Text = 'Input required'
                  # [System.Windows.Forms.MessageBox]::Show('Input required')
                  $tab_control1.SelectedIndex = 1
                  $sender.Select()
				$result = $sender.Focus()
				
                } else {
				$l1.Text = ''
				

				
			
                }







        })
    
    #################################################################
    #  Continue Ui code:
    #################################################################
	##where the tabs are added
            $tab_control1.Controls.Add($panel1)
            $tab_control1.Controls.Add($panel2)
	
	################## Tab Location and Size
	$tab_control1.Location = new-object System.Drawing.Point(7, 88)
            $tab_control1.Name = "tabControl1"
            $tab_control1.SelectedIndex = 1
            $textbox1.Select()
            $textbox1.Enabled = $true
            $tab_control1.Size = new-object System.Drawing.Size(367, 250)
            $tab_control1.TabIndex = 0
    
            $f.AutoScaleBaseSize = new-object System.Drawing.Size(5, 13)
	########  Window SIZE:
	
	$f.ClientSize = new-object System.Drawing.Size(680, 349)
            $f.Controls.Add($tab_control1)
            $panel2.ResumeLayout($false)
            $panel2.PerformLayout()
            $panel1.ResumeLayout($false)
            $tab_control1.ResumeLayout($false)
            $f.ResumeLayout($false)
            $f.ActiveControl = $textbox1
    
            $f.Topmost = $true
    
    
            $f.Add_Shown( { $f.Activate() } )
            $f.KeyPreview = $True
    
    
            [Void] $f.ShowDialog( ($caller) )
	
	$f.Dispose()


    }
    PromptWithTabs





    rv * -ea SilentlyContinue; rmo *; $error.Clear(); 

